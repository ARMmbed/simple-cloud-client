diff --git a/features/FEATURE_LWIP/lwip-interface/lwip/src/include/lwip/arch.h b/features/FEATURE_LWIP/lwip-interface/lwip/src/include/lwip/arch.h
index 372cea1..f1f4cb1 100644
--- a/features/FEATURE_LWIP/lwip-interface/lwip/src/include/lwip/arch.h
+++ b/features/FEATURE_LWIP/lwip-interface/lwip/src/include/lwip/arch.h
@@ -121,7 +121,7 @@ typedef uintptr_t mem_ptr_t;
  * \#define LWIP_DECLARE_MEMORY_ALIGNED(variable_name, size) u32_t variable_name[(size + sizeof(u32_t) - 1) / sizeof(u32_t)]
  */
 #ifndef LWIP_DECLARE_MEMORY_ALIGNED
-#define LWIP_DECLARE_MEMORY_ALIGNED(variable_name, size) u8_t variable_name[LWIP_MEM_ALIGN_BUFFER(size)]
+#define LWIP_DECLARE_MEMORY_ALIGNED(variable_name, size) u8_t variable_name[LWIP_MEM_ALIGN_BUFFER(size)] __attribute__((section(".update")))
 #endif

 /** Calculate memory size for an aligned buffer - returns the next highest
diff --git a/rtos/rtx/TARGET_CORTEX_M/RTX_CM_lib.h b/rtos/rtx/TARGET_CORTEX_M/RTX_CM_lib.h
index 679f850..67deb4d 100644
--- a/rtos/rtx/TARGET_CORTEX_M/RTX_CM_lib.h
+++ b/rtos/rtx/TARGET_CORTEX_M/RTX_CM_lib.h
@@ -362,7 +362,7 @@ static uint32_t thread_stack_main[DEFAULT_STACK_SIZE / sizeof(uint32_t)];
 #elif defined(TARGET_XDOT_L151CC)
 static uint32_t thread_stack_main[DEFAULT_STACK_SIZE * 6 / sizeof(uint32_t)];
 #else
-static uint32_t thread_stack_main[DEFAULT_STACK_SIZE * 2 / sizeof(uint32_t)];
+static uint32_t thread_stack_main[DEFAULT_STACK_SIZE * 2 / sizeof(uint32_t)] __attribute__((section(".update")));
 #endif
 osThreadDef_t os_thread_def_main = {(os_pthread)pre_main, osPriorityNormal, 1U, sizeof(thread_stack_main), thread_stack_main};

diff --git a/rtos/rtx/TARGET_CORTEX_M/cmsis_os.h b/rtos/rtx/TARGET_CORTEX_M/cmsis_os.h
index b1ab4b7..f3e8f2c 100644
--- a/rtos/rtx/TARGET_CORTEX_M/cmsis_os.h
+++ b/rtos/rtx/TARGET_CORTEX_M/cmsis_os.h
@@ -325,7 +325,7 @@ extern const osThreadDef_t os_thread_def_##name
 #else                            // define the object
 #ifdef __MBED_CMSIS_RTOS_CM
 #define osThreadDef(name, priority, stacksz)  \
-uint32_t os_thread_def_stack_##name [stacksz / sizeof(uint32_t)]; \
+uint32_t os_thread_def_stack_##name [stacksz / sizeof(uint32_t)] __attribute__((section(".update"))); \
 const osThreadDef_t os_thread_def_##name = \
 { (name), (priority), 1, (stacksz), (os_thread_def_stack_##name) }
 #else
diff --git a/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/device/TOOLCHAIN_GCC_ARM/MK64FN1M0xxx12.ld b/targets/TARGET_Freescale/TARGET_MCUXpr
index 327e9de..06197ce 100644
--- a/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/device/TOOLCHAIN_GCC_ARM/MK64FN1M0xxx12.ld
+++ b/targets/TARGET_Freescale/TARGET_MCUXpresso_MCUS/TARGET_MCU_K64F/device/TOOLCHAIN_GCC_ARM/MK64FN1M0xxx12.ld
@@ -241,6 +241,19 @@ SECTIONS
     __uvisor_bss_end = .;
   } > m_data

+  .update (NOLOAD) :
+  {
+    . = ALIGN(32);
+    *(.update)
+    *(.update*)
+    . = ALIGN(32);
+  } > m_data
+
+  __m_data_top = ORIGIN(m_data) + LENGTH(m_data);
+  __m_data_current = .;
+
+  ASSERT(__m_data_top >= __m_data_current, "region m_data overflowed with data")
+
   /* Heap space for the page allocator
   /* If uVisor shares the SRAM with the OS/app, ensure that this section is
    * the first one after the uVisor BSS section. Otherwise, ensure it is the


