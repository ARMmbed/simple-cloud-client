
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

project (mbedCloud)

if( NOT CMAKE_BUILD_TYPE )
  set( CMAKE_BUILD_TYPE Release CACHE STRING
       "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel."
       FORCE )
endif()
SET(ORIGINAL_SRC_DIR ${CMAKE_SOURCE_DIR})
SET (INCLUDE_FILE_NAME ${ORIGINAL_SRC_DIR}/include_file.txt)
get_filename_component(NEW_CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}/.. REALPATH)
SET(CMAKE_SOURCE_DIR ${NEW_CMAKE_SOURCE_DIR} CACHE INTERNAL "" FORCE)

get_filename_component(CMAKE_PLATFORM ../pal-platform/platform.cmake REALPATH)
include (${CMAKE_PLATFORM})

set(MBED_CLOUD_CLIENT_BUILD_SYS_MIN_VER_CMAKE 2)

if (EXTARNAL_DEFINE_FILE)
    include(${EXTARNAL_DEFINE_FILE})
ENDIF()


INCLUDE(CMakeForceCompiler)
cmake_minimum_required (VERSION 2.6)
#include (${CMAKE_TOOLCHAIN_FILE})

include (${CMAKE_TOOLCHAIN_FILE})
# The version number.
set (Test_VERSION_MAJOR 1)
set (Test_VERSION_MINOR 0)

# ENABLE ASM
ENABLE_LANGUAGE(ASM)

file(WRITE dummy.c "int pal_cmake_dummy_refernce_for_building(void) { return 0; }")
file(WRITE ${INCLUDE_FILE_NAME} " ")

get_filename_component(CMAKE_COMMON ../pal-platform/common.cmake REALPATH)
get_filename_component(CMAKE_PLATFORM ../pal-platform/platform.cmake REALPATH)
message ("path to common.cmake is ${CMAKE_COMMON}")

include (${CMAKE_COMMON})
#init compilation file
file(WRITE "${COMPILATION_DETAILS_FILE_NAME}" "")
#include (${CMAKE_PLATFORM})


include_directories("${PROJECT_BINARY_DIR}")


IF(CMAKE_BUILD_TYPE MATCHES Release)
    SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Release)
    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Release)
ELSEIF(CMAKE_BUILD_TYPE MATCHES Debug)
    SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Debug)
    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/Debug)
ENDIF()


foreach (_var ${EXTRA_CMAKE_DIRS})
    get_filename_component(EXTRA_DIR ${_var} NAME)
    add_subdirectory(${_var} ${CMAKE_BINARY_DIR}/${EXTRA_DIR})
endforeach()

get_filename_component(CMAKE_SOURCE_DIR_NAME ${CMAKE_SOURCE_DIR} NAME)
add_subdirectory(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}/${CMAKE_SOURCE_DIR_NAME})

message ("1. SRC_LIBS = ${SRC_LIBS}")
message ("2. TEST_LIBS = ${TEST_LIBS}")

# add the executable
foreach(TEST_LIB ${TEST_LIBS})
    message ("foreach ${TEST_LIB}")

    if (NOT Additional_SRC)
        set(Additional_SRC dummy.c)
    endif()

    add_executable (${TEST_LIB}.elf ${Additional_SRC})
    target_link_libraries (${TEST_LIB}.elf  ${TEST_LIB} ${SRC_LIBS} ${PLATFORM_LIBS} ${SRC_LIBS} ${TEST_LIB} ) # SRC_LIBS appear twice to resolve linker dependency issues between pal and tls static libraries
    target_link_libraries (${TEST_LIB}.elf  ${SRC_LIBS})
    list(REVERSE SRC_LIBS)
    target_link_libraries (${TEST_LIB}.elf  ${PLATFORM_LIBS} ${SRC_LIBS} ${PLATFORM_LIBS})
    #target_link_libraries(${TEST_LIB} debug ${DEBUG_LIBS})
    #target_link_libraries(${TEST_LIB} release ${DEBUG_RELEASE})

    if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
        target_link_libraries(${TEST_LIB}.elf debug m)
        target_link_libraries(${TEST_LIB}.elf debug c)
        #target_link_libraries(${PROJECT_NAME} debug gcc)
        target_link_libraries(${TEST_LIB}.elf optimized m)
        target_link_libraries(${TEST_LIB}.elf optimized c)
        #target_link_libraries(${PROJECT_NAME} optimized gcc)

    endif()

    if (NOT (${OS_BRAND} MATCHES "Linux"))
        ELF_TO_BIN(${TEST_LIB} ${EXECUTABLE_OUTPUT_PATH})
    endif()

    if (${OS_BRAND} MATCHES Linux)
        target_link_libraries(${TEST_LIB}.elf optimized rt)
        target_link_libraries(${TEST_LIB}.elf debug rt)
        target_link_libraries(${TEST_LIB}.elf optimized pthread)
        target_link_libraries(${TEST_LIB}.elf debug pthread)
    endif ()

    set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES  ${TEST_LIB}.elf)
    set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES  ${TEST_LIB}.bin)
endforeach()




#install(TARGETS mbedCloud DESTINATION bin)
